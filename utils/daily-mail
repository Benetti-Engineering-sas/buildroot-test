#!/usr/bin/env python

import _mysql
import sys
import os
import textwrap
import smtplib
from email.mime.text import MIMEText
from datetime import date, timedelta
import localconfig
import csv
from collections import defaultdict

sys.path.append(os.path.join(localconfig.brbase, "utils"))
import getdeveloperlib

baseurl = "autobuild.buildroot.net"
http_baseurl = "http://" + baseurl

developers = getdeveloperlib.parse_developers(localconfig.brbase)

def get_branches():
    """Returns the list of branches currently tested by the autobuilders."""
    branch_file = os.path.join(os.path.dirname(os.path.realpath(__file__)), "..", "web", "branches")
    with open(branch_file) as r:
        csv_branches = r.readlines()
    branches = []
    for branch in csv.reader(csv_branches):
        branches.append(branch[0])
    return branches

# Find, for the previous day, the global statistics: number of
# success, failures, timeouts, and total number of builds.
def get_overall_stats(db, datestr, branches):
    stats = {}
    for branch in branches:
        db.query("""select status,count(id) as count from results
        where date(builddate) = '%s' and branch = '%s' group by status""" % (datestr, branch))
        r = db.use_result()
        result = dict(r.fetch_row(maxrows=0))
        if '0' in result:
            success = int(result['0'])
        else:
            success = 0
        if '1' in result:
            failures = int(result['1'])
        else:
            failures = 0
        if '2' in result:
            timeouts = int(result['2'])
        else:
            timeouts = 0
        total = success + failures + timeouts
        stats[branch] = (success, failures, timeouts, total)
    return stats

class Notification:
    def __init__(self):
        self.arch_notifications = defaultdict(list)
        self.package_notifications = defaultdict(list)

# Calculate the list of .mk files in the Buildroot source tree, will
# be used to guess the name of the packages that caused build
# failures.
def get_mklist(basepath):
    mklist = []
    for root, dirs, files in os.walk(basepath):
        for f in files:
            if not f.endswith(".mk"):
                continue
            mklist.append(os.path.splitext(f)[0])
    return mklist

mklist = get_mklist(localconfig.brbase)

def get_notification_for_dev(notifications, dev):
    if dev in notifications:
        return notifications[dev]
    else:
        n = Notification()
        notifications[dev] = n
        return n

# Add to the notifications{} dict notifications that are related to
# architecture "maintainers".
def add_arch_notification(branch, notifications, build_result):
    arch = build_result['arch']
    for dev in developers:
        if arch not in dev.architectures:
            continue
        n = get_notification_for_dev(notifications, dev)
        n.arch_notifications[branch].append(build_result)

# Given a failure reason as provided by the autobuilders, tries to
# find the corresponding package by stripping progressively the last
# "-<something>" parts of the failure reason. A failure reason like
# "qt5location-5.6.1-1" will first attempt to find a package named
# "qt5location-5.6.1" (which will not find any match) and then attempt
# to find a package named "qt5location" (which will match an existing
# package).
def find_package(reason):
    if reason == "unknown":
        return
    # Strip host- prefix so that host packages can match
    if reason.startswith("host-"):
        reason = reason[5:]
    # Strip a first component of the version
    while "-" in reason:
        reason = reason[:reason.rindex("-")]
        if reason in mklist:
            return reason
    return None

ORPHAN_DEVELOPER = "Arnout Vandecappelle <arnout@mind.be>"

def get_orphan_developer():
    for dev in developers:
        if dev.name == ORPHAN_DEVELOPER:
            return dev
    return None

# Add to the notifications{} dict notifications that are related to
# package "maintainers".
def add_package_notification(branch, notifications, build_result):
    pkg = find_package(build_result['reason'])
    if not pkg:
        return
    orphan = True
    for dev in developers:
        if pkg not in dev.packages:
            continue
        orphan = False
        n = get_notification_for_dev(notifications, dev)
        n.package_notifications[branch].append(build_result)
    if orphan:
        dev = get_orphan_developer()
        n = get_notification_for_dev(notifications, dev)
        n.package_notifications[branch].append(build_result)
    build_result['orphan'] = orphan

def show_results(results, show_status, show_orphan=False):
    contents = ""
    for r in results:
        arch = r['arch']
        reason = r['reason']
        if len(reason) > 30:
            reason = reason[0:27] + "..."
        status = int(r['status'])
        if status == 1:
            status_str = "NOK"
        elif status == 2:
            status_str = "TIM"
        if r.has_key('orphan') and r['orphan']:
            orphan_str = "ORPH"
        else:
            orphan_str = ""
        url = http_baseurl + "/results/" + r['identifier']
        if show_status:
            contents += "%12s | %30s | %3s | %40s" % (arch, reason, status_str, url)
        else:
            contents += "%12s | %30s | %40s" % (arch, reason, url)
        if show_orphan:
            contents += " | %4s\n" % (orphan_str)
        else:
            contents += "\n"
    return contents

# Send the e-mails to the individual developers
def developers_email(smtp, branches, notifications, datestr, dry_run):
    for k, v in notifications.iteritems():
        to = k.name
        email_from = localconfig.fromaddr
        subject = "[%s] Your build results for %s" % (baseurl, datestr)
        contents = "Hello,\n\n"
        contents += textwrap.fill("This is the list of Buildroot build failures that occured on %s, and for which you are a registered architecture developer or package developer. Please help us improving the quality of Buildroot by investigating those build failures and sending patches to fix them. Thanks!" % datestr)
        contents += "\n\n"
        show_orphan = k.name == ORPHAN_DEVELOPER

        for branch in branches:
            if v.arch_notifications.has_key(branch):
                archs = v.arch_notifications[branch]
            else:
                archs = []
            if v.package_notifications.has_key(branch):
                packages = v.package_notifications[branch]
            else:
                packages = []

            if len(archs) == 0 and len(packages) == 0:
                continue

            contents += "Results for the '%s' branch\n" % branch
            contents += "=========================" + "=" * len(branch) + "\n\n"

            if len(archs) != 0:
                contents += "Build failures related to your architectures:\n\n"
                contents += show_results(archs, show_status=False, show_orphan=False)
                contents += "\n\n"
            if len(packages) != 0:
                contents += "Build failures related to your packages:\n\n"
                contents += show_results(packages, show_status=False, show_orphan=show_orphan)

            contents += "\n"

        contents += "-- \n"
        contents += http_baseurl
        if dry_run:
            print "====================================================="
            print "To: %s" % to
            print "From: %s" % email_from
            print "Subject: %s" % subject
            print
            print contents
            print "====================================================="
        else:
            msg = MIMEText(contents)
            msg['Subject'] = subject
            msg['To'] = to
            msg['From'] = email_from
            smtp.sendmail(email_from, to, msg.as_string())
            print "To: %s" % k.name

def global_email_branch_result(results, results_by_reason, branch):
    contents = "Results for branch '%s'\n" % branch
    contents += "=====================" + "=" * len(branch) + "\n\n"
    contents += "Classification of failures by reason\n"
    contents += "------------------------------------\n\n"
    for r in results_by_reason:
        reason = r['reason']
        if len(reason) > 30:
            reason = reason[0:27] + "..."
        count = int(r['reason_count'])
        contents += "%30s | %-2d\n" % (reason, count)
    contents += "\n\n"
    contents += "Detail of failures\n"
    contents += "------------------\n\n"
    contents += show_results(results, show_status=True, show_orphan=True)
    contents += "\n"
    return contents

# Send the global e-mail to the mailing list
def global_email(smtp, results, results_by_reason, datestr, overall, dry_run):
    to = "buildroot@buildroot.org"
    email_from = localconfig.fromaddr
    subject = "[%s] Build results for %s" % (baseurl, datestr)
    contents = "Hello,\n\n"
    contents += "Build statistics for %s\n" % datestr
    contents += "===============================\n\n"
    contents += "      branch |  OK | NOK | TIM | TOT |\n"
    for branch, stats in overall.iteritems():
        if stats[3] == 0:
            continue
        contents += "  %10s | %3d | %3d | %3d | %3d |\n" % \
                    (branch, stats[0], stats[1], stats[2], stats[3])
    contents += "\n"
    for branch in results.keys():
        if len(results[branch]) == 0:
            continue
        contents += global_email_branch_result(results[branch], results_by_reason[branch], branch)
    contents += "\n"
    contents += "-- \n"
    contents += http_baseurl
    if dry_run:
        print "====================================================="
        print "To: %s" % to
        print "From: %s" % email_from
        print "Subject: %s" % subject
        print
        print contents
        print "====================================================="
    else:
        msg = MIMEText(contents)
        msg['Subject'] = subject
        msg['To'] = to
        msg['From'] = email_from
        smtp.sendmail(email_from, [to], msg.as_string())
        print "To: buildroot@buildroot.net"

# Get the list of build failures for the past day
def get_build_results(db, datestr, branches):
    results = {}
    for branch in branches:
        db.query("""select * from results
        where date(builddate) = '%s' and status != 0 and branch = '%s' order by reason""" % \
                 (datestr, branch))
        r = db.use_result()
        results[branch] = r.fetch_row(how=1, maxrows=0)
    return results

def get_build_results_grouped_by_reason(db, datestr, branches):
    results_by_reason = {}
    for branch in branches:
        db.query("""select reason,count(id) as reason_count from results
        where date(builddate) = '%s' and status != 0 and branch = '%s'
        group by reason order by reason_count desc, reason""" % (datestr, branch))
        r = db.use_result()
        results_by_reason[branch] = r.fetch_row(how=1, maxrows=0)
    return results_by_reason

# Prepare the notifications{} dict for the notifications to individual
# developers, based on architecture developers and package
# developers
def calculate_notifications(results):
    notifications = {}
    for branch in results.keys():
        for result in results[branch]:
            status = int(result['status'])
            if status != 1:
                continue
            add_arch_notification(branch, notifications, result)
            add_package_notification(branch, notifications, result)
    return notifications

def __main__():
    yesterday = date.today() - timedelta(1)
    yesterday_str = yesterday.strftime('%Y-%m-%d')
    branches = get_branches()

    db = _mysql.connect(host=localconfig.host,
                        user=localconfig.user,
                        passwd=localconfig.passwd,
                        db=localconfig.db)
    overall_stats = get_overall_stats(db, yesterday_str, branches)
    results = get_build_results(db, yesterday_str, branches)
    results_by_reason = get_build_results_grouped_by_reason(db, yesterday_str, branches)
    notifications = calculate_notifications(results)
    dry_run = False
    if len(sys.argv) == 2 and sys.argv[1] == "--dry-run":
        dry_run = True
    smtp = smtplib.SMTP(localconfig.smtphost, localconfig.smtpport)
    smtp.starttls()
    smtp.login(localconfig.smtpuser, localconfig.smtppass)
    developers_email(smtp, branches, notifications, yesterday_str, dry_run)
    global_email(smtp, results, results_by_reason, yesterday_str,
                 overall_stats, dry_run)
    smtp.quit()

__main__()
