#!/usr/bin/env python3

import sys
import os
import textwrap
import smtplib
from email.mime.text import MIMEText
from email.utils import formatdate
from datetime import date, timedelta, datetime
import localconfig
import csv
from collections import defaultdict
import math
import argparse
import re
import json
from packaging import version
import asyncio
import aiohttp

sys.path.append(os.path.join(localconfig.brbase, "utils"))
import getdeveloperlib  # noqa: E402

RE_DATE = re.compile(r'^\d\d\d\d-\d\d-\d\d$')
RE_HASH_40 = re.compile(r'.*[a-fA-F0-9]{40}.*')

GITLAB_CI_MAX_PAGE_SIZE = 100

baseurl = "autobuild.buildroot.net"
http_baseurl = "http://" + baseurl

developers = getdeveloperlib.parse_developers()
gitlab_ci_http_pool = None


def get_branches():
    """Returns the list of branches currently tested by the autobuilders."""
    branch_file = os.path.join(os.path.dirname(os.path.realpath(__file__)), "..", "web", "branches")
    with open(branch_file) as r:
        csv_branches = r.readlines()
    branches = []
    for branch in csv.reader(csv_branches):
        branches.append(branch[0])
    return branches


def get_overall_stats(db, datestr, branches):
    '''
    Find, for the previous day, the global statistics: number of
    success, failures, timeouts, and total number of builds.
    '''
    stats = {}
    for branch in branches:
        cursor = db.cursor()
        cursor.execute("""select status,count(id) as count from results
        where date(builddate) = '{}' and branch = '{}' group by status""".format(datestr, branch))
        results = cursor.fetchall()
        success = 0
        failures = 0
        timeouts = 0
        for result in results:
            if result['status'] == 0:
                success = result['count']
            elif result['status'] == 1:
                failures = result['count']
            elif result['status'] == 2:
                timeouts = result['count']
        total = success + failures + timeouts
        stats[branch] = (success, failures, timeouts, total)
    return stats


class Notification:
    def __init__(self):
        self.arch_notifications = defaultdict(list)
        self.package_notifications = defaultdict(list)
        self.defconfig_notifications = defaultdict(list)
        self.runtime_test_notifications = defaultdict(list)
        self.package_version_notification = []
        self.package_cve_notification = defaultdict(list)


def get_mklist(basepath):
    '''
    Calculate the list of .mk files in the Buildroot source tree, will
    be used to guess the name of the packages that caused build
    failures.
    '''
    mklist = []
    for root, dirs, files in os.walk(basepath):
        for f in files:
            if not f.endswith(".mk"):
                continue
            mklist.append(os.path.splitext(f)[0])
    return mklist


mklist = get_mklist(localconfig.brbase)


def add_arch_notification(branch, notifications, build_result):
    '''
    Add to the notifications{} dict notifications that are related to
    architecture "maintainers".
    '''
    arch = build_result['arch']
    for dev in developers:
        if arch not in dev.architectures:
            continue
        n = notifications.setdefault(dev, Notification())
        n.arch_notifications[branch].append(build_result)


def find_package(reason):
    '''
    Given a failure reason as provided by the autobuilders, tries to
    find the corresponding package by stripping progressively the last
    "-<something>" parts of the failure reason. A failure reason like
    "qt5location-5.6.1-1" will first attempt to find a package named
    "qt5location-5.6.1" (which will not find any match) and then attempt
    to find a package named "qt5location" (which will match an existing
    package).
    '''
    if reason == "unknown":
        return
    # Strip host- prefix so that host packages can match
    if reason.startswith("host-"):
        reason = reason[5:]
    # Strip a first component of the version
    while "-" in reason:
        reason = reason[:reason.rindex("-")]
        if reason in mklist:
            return reason
    return None


ORPHAN_DEVELOPER = "Arnout Vandecappelle <arnout@mind.be>"


def get_orphan_developer():
    for dev in developers:
        if dev.name == ORPHAN_DEVELOPER:
            return dev
    return None


def add_package_notification(branch, notifications, build_result):
    '''
    Add to the notifications{} dict notifications that are related to
    package "maintainers".
    '''
    pkg = find_package(build_result['reason'])
    if not pkg:
        return
    orphan = True
    for dev in developers:
        if pkg not in dev.packages:
            continue
        orphan = False
        n = notifications.setdefault(dev, Notification())
        n.package_notifications[branch].append(build_result)
    if orphan:
        dev = get_orphan_developer()
        n = notifications.setdefault(dev, Notification())
        n.package_notifications[branch].append(build_result)
    build_result['orphan'] = orphan


def add_defconfig_notification(branch, notifications, job):
    '''
    Add to the notifications{} dict notifications that are related to
    defconfig "maintainers".
    '''
    orphan = True
    for dev in developers:
        if job['name'] in dev.defconfigs:
            orphan = False
            notif = notifications.setdefault(dev, Notification())
            notif.defconfig_notifications[branch].append(job)
    if orphan:
        job['orphan'] = True
        notif = notifications.setdefault(get_orphan_developer(), Notification())
        notif.defconfig_notifications[branch].append(job)


def add_runtime_test_notification(branch, notifications, job):
    '''
    Add to the notifications{} dict notifications that are related to
    runtime-tests "maintainers".
    '''
    orphan = True
    for dev in developers:
        if job['full_name'] in dev.runtime_tests:
            orphan = False
            notif = notifications.setdefault(dev, Notification())
            notif.runtime_test_notifications[branch].append(job)
    if orphan:
        job['orphan'] = True
        notif = notifications.setdefault(get_orphan_developer(), Notification())
        notif.runtime_test_notifications[branch].append(job)


def add_outdated_pkg_notification(notifications, package):
    '''
    Add to the notifications{} dict notifications that are related to
    package "maintainers".
    '''
    orphan = True
    for dev in developers:
        if package['name'] in dev.packages:
            orphan = False
            notif = notifications.setdefault(dev, Notification())
            notif.package_version_notification.append(package)
    if orphan:
        package['orphan'] = True
        notif = notifications.setdefault(get_orphan_developer(), Notification())
        notif.package_version_notification.append(package)


def add_cve_pkg_notification(branch, notifications, package):
    '''
    Add to the notifications{} dict notifications that are related to
    package "maintainers".
    '''
    for dev in developers:
        if package['name'] in dev.packages:
            notif = notifications.setdefault(dev, Notification())
            notif.package_cve_notification[branch].append(package)


def shrink_str(string, length, align='right', fill='...'):
    '''
    Returns the `string` shrinked to fit `length` characters and with `fill`
    added on `align`.

    :Example:

    >>> shrink_str('This is a very long string!', 10)
    'This is...'

    >>> shrink_str('This is a very long string!', 20, align='center', fill='[...]')
    'This is[...] string!'
    '''
    if len(fill) > length:
        raise ValueError('`length` cannot be shorter than `fill`')
    if align == 'right':
        return string[:length-len(fill)] + fill if len(string) > length else string
    elif align == 'left':
        return fill + string[len(string)-length+len(fill):] if len(string) > length else string
    elif align == 'center':
        lcut = math.floor((length - len(fill)) / 2)
        rcut = len(string) - math.ceil((length - len(fill)) / 2)
        return string[:lcut] + fill + string[rcut:] if len(string) > length else string
    else:
        raise ValueError('align must be either `left`, `right` or `center`')


def show_gitlab_ci_jobs(jobs, job_column_description, job_column_length, show_orphan=False):
    # Header
    contents = ''
    if show_orphan:
        contents += '{:>{}} | {:^61} | {:^5}\n'.format(job_column_description, job_column_length,
                                                       'link to the job', 'orph?')
        contents += '{0:->{1}}-+-{0:-^61}-+-{0:-^5}\n'.format('', job_column_length)
    else:
        contents += '{:>{}} | {:^61}\n'.format(job_column_description, job_column_length,
                                               'link to the job')
        contents += '{0:->{1}}-+-{0:-^61}\n'.format('', job_column_length)

    # Data
    for job in sorted(jobs, key=lambda j: (j['kind'], j['name'])):
        name = shrink_str(job['name'], job_column_length, align='left')
        orphan = 'ORPH' if job.get('orphan') else ''

        contents += '{:>{}} | {:^61}'.format(name, job_column_length, job['web_url'])
        if show_orphan:
            contents += ' | {:^5}'.format(orphan)
        contents += '\n'

    return contents


def show_results(results, show_status, show_orphan=False):
    contents = ""
    # Header
    if show_status:
        contents += '{:^12} | {:^30} | {:^3} | {:^79}'.format('arch', 'reason', 'OK?', 'url')
    else:
        contents += '{:^12} | {:^30} | {:^79}'.format('arch', 'reason', 'url')
    if show_orphan:
        contents += ' | {:^5}'.format('orph?')

    if show_status:
        contents += '\n{0:-^12}-+-{0:-^30}-+-{0:-^3}-+-{0:-^79}-'.format('')
    else:
        contents += '\n{0:-^12}-+-{0:-^30}-+-{0:-^79}-'.format('')
    if show_orphan:
        contents += '+-{0:-^5}-'.format('')
    contents += '\n'

    # Actual data
    for r in results:
        arch = r['arch']
        reason = shrink_str(r['reason'], 30)
        status = int(r['status'])
        if status == 1:
            status_str = "NOK"
        elif status == 2:
            status_str = "TIM"
        orphan_str = 'ORPH' if r.get('orphan') else ''
        url = http_baseurl + "/results/" + r['identifier']
        if show_status:
            contents += "{:^12} | {:^30} | {:^3} | {:^79}".format(arch, reason, status_str, url)
        else:
            contents += "{:^12} | {:^30} | {:^79}".format(arch, reason, url)
        if show_orphan:
            contents += " | {:^4}\n".format(orphan_str)
        else:
            contents += "\n"
    return contents


def show_outdated(packages, show_orphan=False):
    contents = ''
    # Header
    contents += '{:^30} | {:^8} | {:^44} | {:^12} | {:^12}'.format('name', 'found by',
                                                                   'link to release-monitoring.org',
                                                                   'version', 'upstream')
    if show_orphan:
        contents += ' | {:^5}'.format('orph?')
    contents += '\n{0:-^30}-+-{0:-^8}-+-{0:-^44}-+-{0:-^12}-+-{0:-^12}-'.format('')
    if show_orphan:
        contents += '+-{:-^5}-'.format('')
    contents += '\n'

    # Actual data
    for pkg in packages:
        name = shrink_str(pkg['name'], 30)
        version = shrink_str(pkg['version'], 12)
        upstream = shrink_str(pkg['upstream'], 12)
        orphan_str = 'ORPH' if pkg.get('orphan') else ''
        url = 'https://release-monitoring.org/project/{:0>5}'.format(pkg['id'])

        contents += '{:>30} | {:^8} | {:0>5} | {:12} | {:12}'.format(name, pkg['from'], url, version, upstream)
        if show_orphan:
            contents += ' | {:4}'.format(orphan_str)
        contents += '\n'
    return contents


def show_cves(packages):
    contents = ''
    # Header
    contents += '{:^30} | {:^16} | {:^60}\n'.format('name', 'CVE', 'link')
    contents += '{0:-^30}-+-{0:-^16}-+-{0:-^60}-\n'.format('')
    # Actual data
    for pkg in packages:
        name = shrink_str(pkg['name'], 30)
        for cve in pkg['cves']:
            contents += '{:>30} | {:<16} | {:<60}\n'.format(name, cve, "https://security-tracker.debian.org/tracker/" + cve)
    return contents


def format_title(title, separator_char="="):
    return title + "\n" + separator_char * len(title) + "\n\n"


def developers_email(smtp, branches, notifications, datestr, dry_run):
    '''
    Send the e-mails to the individual developers
    '''
    for dev, notif in notifications.items():
        to = dev.name
        email_from = localconfig.fromaddr
        subject = "[{}] Your daily results for {}".format(baseurl, datestr)
        contents = "Hello,\n\n"

        archs = notif.arch_notifications
        packages = notif.package_notifications
        defconfigs = notif.defconfig_notifications
        runtime_tests = notif.runtime_test_notifications

        show_orphan = dev.name == ORPHAN_DEVELOPER

        if archs or packages:
            contents += format_title("Autobuilder failures")

            contents += textwrap.fill(
                """Below is a list of build failures reported by the Buildroot
                autobuilders in relation to packages or CPU
                architectures you are in charge of. Please help us
                improving the quality of Buildroot by investigating
                those build failures and sending patches to fix
                them.Thanks!""".format(datestr))
            contents += "\n\n"

            for branch in set(list(archs.keys()) + list(packages.keys())):
                archs = notif.arch_notifications.get(branch, [])
                packages = notif.package_notifications.get(branch, [])

                contents += format_title("Results for the '{}' branch".format(branch), "-")

                if len(archs) != 0:
                    contents += "Build failures related to your architectures:\n\n"
                    contents += show_results(archs, show_status=False, show_orphan=False)
                    contents += "\n\n"
                if len(packages) != 0:
                    contents += "Build failures related to your packages:\n\n"
                    contents += show_results(packages, show_status=False, show_orphan=show_orphan)
                    contents += "\n\n"

        if defconfigs or runtime_tests:
            contents += format_title("Gitlab CI failures")
            contents += textwrap.fill(
                """Below is a list of Gitlab CI job failures in relation to defconfigs
                or runtime tests you are in charge of. Please help us
                improving the quality of Buildroot by investigating
                those build failures and sending patches to fix
                them.Thanks!""".format(datestr))
            contents += "\n\n"

            for ref in set(list(defconfigs.keys()) + list(runtime_tests.keys())):
                defconfigs = notif.defconfig_notifications.get(ref, [])
                runtimes = notif.runtime_test_notifications.get(ref, [])

                contents += format_title("Results for '{}'".format(ref), "-")

                if len(defconfigs) != 0:
                    contents += "Build failures related to your defconfigs:\n\n"
                    contents += show_gitlab_ci_jobs(defconfigs, job_column_description='defconfig',
                                                job_column_length=33, show_orphan=show_orphan)
                    contents += "\n\n"
                if len(runtimes) != 0:
                    contents += "Build failures related to your runtime tests:\n\n"
                    contents += show_gitlab_ci_jobs(runtimes, job_column_description='runtime-test',
                                                    job_column_length=25, show_orphan=show_orphan)

            contents += "\n"

        outdated = notif.package_version_notification
        if len(outdated) != 0:
            contents += format_title("Outdated packages")
            contents += textwrap.fill(
                """This is the list of packages for which a new version has been
                detected and for which you are a registered
                developer. Please help us improving the quality of
                Buildroot by bumping these packages to their latest
                version. Thanks!""")
            contents += '\n\n'
            contents += show_outdated(outdated, show_orphan=show_orphan)
            contents += '\n'

        for branch, cves in notif.package_cve_notification.items():
            contents += format_title("Packages with CVEs in branch %s" % branch)
            contents += textwrap.fill(
                """This is the list of packages for which a known CVE is affecting
                them, which means a security vulnerability exists for
                those packages.""")
            contents += "\n\n"
            contents += show_cves(cves)
            contents += "\n\n"

        contents += "-- \n"
        contents += http_baseurl
        if dry_run:
            print("=====================================================")
            print("To: {}".format(to))
            print("From: {}".format(email_from))
            print("Subject: {}".format(subject))
            print("")
            print(contents)
            print("=====================================================")
        else:
            msg = MIMEText(contents)
            msg['Subject'] = subject
            msg['To'] = to
            msg['From'] = email_from
            msg['Date'] = formatdate()
            smtp.sendmail(email_from, to, msg.as_string())
            print("To: {}".format(dev.name))


def global_email_branch_result(branch, results, results_by_reason):
    contents = format_title("Classification of failures by reason for {}".format(branch), "-")
    for r in results_by_reason:
        reason = shrink_str(r['reason'], 30)
        count = int(r['reason_count'])
        contents += "{:>30} | {:<2}\n".format(reason, count)
    contents += "\n\n"
    contents += format_title("Detail of failures for {}".format(branch), "-")
    contents += show_results(results, show_status=True, show_orphan=True)
    contents += "\n\n"
    return contents


def global_email_ref_gitlab_result(ref, gitlab_results):
    defconfigs = [j for p in gitlab_results for j in p['jobs'] if j['kind'] == 'defconfig']
    runtime_tests = [j for p in gitlab_results for j in p['jobs'] if j['kind'] == 'runtime-test']

    contents = ""
    if len(defconfigs) != 0:
        contents += format_title('Detail of defconfig failures for {}'.format(ref), '-')
        contents += show_gitlab_ci_jobs(defconfigs, job_column_description='defconfig',
                                        job_column_length=33, show_orphan=True)
        contents += "\n\n"
    if len(runtime_tests) != 0:
        contents += format_title("Detail of runtime-test failures for {}".format(ref), "-")
        contents += show_gitlab_ci_jobs(runtime_tests, job_column_description='runtime-test',
                                        job_column_length=25, show_orphan=True)
        contents += "\n\n"
    return contents


def global_email(smtp, branches, results, results_by_reason, datestr, overall, outdated_pkgs, cve_pkgs, gitlab_results, dry_run):
    '''
    Send the global e-mail to the mailing list
    '''
    to = "buildroot@buildroot.org"
    email_from = localconfig.fromaddr
    subject = "[{}] Daily results for {}".format(baseurl, datestr)
    contents = "Hello,\n\n"

    # Overall autobuilder statistics
    if len(overall) != 0:
        contents += format_title("Autobuild statistics for {}".format(datestr))
        contents += "      branch |  OK | NOK | TIM | TOT |\n"
        for branch in sorted(overall.keys()):
            stats = overall[branch]
            if stats[3] == 0:
                continue
            contents += "  {:^10} | {:^3} | {:^3} | {:^3} | {:^3} |\n".format(branch, stats[0], stats[1], stats[2], stats[3])
        contents += "\n"

    # Detailed autobuilder results
    for branch in results.keys():
        contents += global_email_branch_result(branch,
                                               results.get(branch, []),
                                               results_by_reason[branch])

    # Gitlab CI results
    if len(gitlab_results.keys()) != 0:
        contents += format_title("Gitlab CI results for {}".format(datestr), "=")

        for ref in sorted(gitlab_results.keys()):
            contents += global_email_ref_gitlab_result(ref, gitlab_results.get(ref, []))

    # Outdated packages details
    if outdated_pkgs:
        contents += format_title("Packages having a newer version")
        contents += show_outdated(outdated_pkgs, show_orphan=True)
        contents += "\n"

    # CVE details
    for branch, cves in cve_pkgs.items():
        contents += format_title("Packages having CVEs in branch %s" % branch)
        contents += show_cves(cves)
        contents += "\n"

    contents += "\n"
    contents += "-- \n"
    contents += http_baseurl
    if dry_run:
        print("=====================================================")
        print("To: {}".format(to))
        print("From: {}".format(email_from))
        print("Subject: {}".format(subject))
        print("")
        print(contents)
        print("=====================================================")
    else:
        msg = MIMEText(contents)
        msg['Subject'] = subject
        msg['To'] = to
        msg['From'] = email_from
        msg['Date'] = formatdate()
        smtp.sendmail(email_from, [to], msg.as_string())
        print("To: buildroot@buildroot.net")


def get_build_results(db, datestr, branches):
    '''
    Get the list of build failures for the past day
    '''
    results = {}
    for branch in branches:
        cursor = db.cursor()
        cursor.execute("""select * from results
        where date(builddate) = '{}'
        and status != 0 and branch = '{}'
        order by reason""".format(datestr, branch))
        r = cursor.fetchall()
        if r:
            results[branch] = r
    return results


def get_build_results_grouped_by_reason(db, datestr, branches):
    results_by_reason = {}
    for branch in branches:
        cursor = db.cursor()
        cursor.execute("""select reason,count(id) as reason_count from results
        where date(builddate) = '{}' and status != 0 and branch = '{}'
        group by reason order by reason_count desc, reason""".format(datestr, branch))
        results_by_reason[branch] = cursor.fetchall()
    return results_by_reason


def get_outdated_pkgs(path):
    with open(path, 'r') as f:
        stats = json.load(f)
    s = []
    for name, pkg in stats['packages'].items():
        status = pkg['latest_version']['status']
        latest_ver = pkg['latest_version']['version']
        p_id = pkg['latest_version']['id']
        cur_ver = pkg['current_version']
        # if not upstream version was found, skip
        if status not in (2, 3):
            continue
        # if there's no current or no latest version to compare, skip
        if not cur_ver or not latest_ver:
            continue
        # if the current version is a Git hash, skip as
        # release-monitoring.org only knows about "regular" releases
        if RE_HASH_40.match(cur_ver):
            continue
        # if the current version in Buildroot is newer or equal to the
        # latest reported by release-monitoring, skip
        if version.parse(str(cur_ver)) >= version.parse(str(latest_ver)):
            continue

        s.append({'name': str(name),
                  'id': p_id,
                  'version': str(cur_ver),
                  'upstream': str(latest_ver),
                  'from': 'DISTRO' if status == 2 else 'GUESS'})
    return sorted(s, key=lambda pkg: pkg['name'])


# Returns a dict, with the branch name as the key, and as
# values a list of dicts for each package/CVE
def get_cve_pkgs(path, branches):
    d = {}
    for branch in branches:
        fpath = os.path.join(path, branch + ".json")
        if not os.path.exists(fpath):
            print("WARNING: skipping branch %s for CVE checking, file not found" % branch)
            continue
        with open(fpath, 'r') as f:
            stats = json.load(f)
        s = []
        for name, pkg in stats['packages'].items():
            if len(pkg['cves']) == 0:
                continue
            s.append({'name': str(name),
                      'cves': pkg['cves']})
        d[branch] = sorted(s, key=lambda pkg: pkg['name'])
    return d


async def gitlab_ci_get_job_one_page(pipeline, page):
    params = {
        "per_page": GITLAB_CI_MAX_PAGE_SIZE,
        "page": page,
        "scope": "failed",
    }
    headers = {
        'PRIVATE-TOKEN': localconfig.gitlab_user_token
    }
    url = "https://gitlab.com/api/v4/projects/{}/pipelines/{}/jobs".format(localconfig.gitlab_project_id, pipeline)
    async with aiohttp.ClientSession() as session:
        async with session.get(url, params=params, headers=headers) as resp:
            return await resp.json()


async def gitlab_ci_get_all_jobs(pipeline):
    '''
    Simple helper to retrieve data from call paginated url.
    Request's result is assumed to be json list.
    '''
    results = []
    page = 1
    while True:
        res = await gitlab_ci_get_job_one_page(pipeline, page)
        results += res
        page += 1
        if len(res) != GITLAB_CI_MAX_PAGE_SIZE:
            break
    return results


async def gitlab_ci_get_pipeline_jobs(pipeline, kinds=None):
    jobs = await gitlab_ci_get_all_jobs(pipeline)
    for job in jobs:
        # Remove a bunch of noisy unnecessary fields
        del job['pipeline'], job['user'], job['runner'], job['commit']['message'], job['artifacts']
        # Backup the actual name and set the job's kind and name depending on the naming scheme
        name = job['full_name'] = job['name']
        if name.endswith('_defconfig'):
            job['kind'] = 'defconfig'
            job['name'] = name[:-10]
        elif name.startswith('tests.'):
            job['kind'] = 'runtime-test'
            job['name'] = name.split('.')[-1]
        else:
            job['kind'] = 'other'
    if kinds:
        jobs = (job for job in jobs if job['kind'] in kinds)
    return sorted(jobs, key=lambda j: (j['name'], j['kind']))


async def gitlab_ci_get_pipelines_one_page(page, from_date, to_date):
    params = {
        "per_page": GITLAB_CI_MAX_PAGE_SIZE,
        "page": page,
        "status": "failed",
        "updated_after": from_date,
        "updated_before": to_date,
        "order_by": "updated_at",
    }
    url = "https://gitlab.com/api/v4/projects/{}/pipelines".format(localconfig.gitlab_project_id)
    async with aiohttp.ClientSession() as session:
        async with session.get(url, params=params) as resp:
            return await resp.json()


async def gitlab_ci_get_pipelines(from_date):
    '''
    Returns all gitlab-ci pipelines ran after the given `date`
    '''
    from_date_str = from_date.strftime("%Y-%m-%dT%H:%M:%S.%fZ")
    to_date_str = (from_date + timedelta(1)).strftime("%Y-%m-%dT%H:%M:%S.%fZ")
    page = 1
    pipelines = []

    # Read all pipeline pages until an empty page is reached
    while True:
        # List pipelines
        cur_pipelines = await gitlab_ci_get_pipelines_one_page(page, from_date_str, to_date_str)

        # No more pipelines in the result, bail out
        if len(cur_pipelines) == 0:
            break

        pipelines += cur_pipelines
        page += 1

    return pipelines


async def gitlab_ci_get_downstream_pipeline(pipeline):
    url = "https://gitlab.com/api/v4/projects/{}/pipelines/{}/bridges".format(localconfig.gitlab_project_id, pipeline)
    headers = {
        'PRIVATE-TOKEN': localconfig.gitlab_user_token
    }
    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=headers) as resp:
            json = await resp.json()
            # Jobs ran on old branches (2020.02.x) don't have
            # downstream pipelines. In this case, pretend the
            # downstream pipeline is ourself, as it's directly the
            # mainline pipeline that contains the jobs.
            if len(json) == 0:
                return pipeline
            else:
                return json[0]["downstream_pipeline"]["id"]


async def gitlab_ci_get(from_date, kinds=None):
    '''
    Retrieve failed jobs from gitlab-ci grouped by pipelines
    from `date` (optionally up to `ndays` old)
    If `kinds` list is provided, only jobs matching one of the
    given kind will be returned.
    '''

    # Fetch pipelines
    pipelines = await gitlab_ci_get_pipelines(from_date)

    # Get the downstream pipeline ID for all pipelines
    pipelines_downstream_ids = await asyncio.gather(*[gitlab_ci_get_downstream_pipeline(pipeline['id'])
                                                      for pipeline in pipelines])
    for pipeline, downstream_id in zip(pipelines, pipelines_downstream_ids):
        pipeline['downstream-id'] = downstream_id

    # Get jobs ran by those downstream pipelines
    pipelines_jobs = await asyncio.gather(*[gitlab_ci_get_pipeline_jobs(pipeline['downstream-id'], kinds)
                                            for pipeline in pipelines])
    for pipeline, jobs in zip(pipelines, pipelines_jobs):
        pipeline['jobs'] = jobs

    refs = set([p['ref'] for p in pipelines])

    # Group pipelines by references (i.e tag, branch, etc.)
    pipelines = {ref: [p for p in pipelines if p['ref'] == ref] for ref in refs}
    return pipelines


def calculate_notifications(results, outdated_pkgs, cve_pkgs, gitlab_results):
    '''
    Prepare the notifications{} dict for the notifications to individual
    developers, based on architecture developers, package developers,
    defconfig developers and runtime developers.
    '''
    notifications = {}
    for branch in results.keys():
        for result in results[branch]:
            status = int(result['status'])
            if status != 1:
                continue
            add_arch_notification(branch, notifications, result)
            add_package_notification(branch, notifications, result)

    for pkg in outdated_pkgs:
        add_outdated_pkg_notification(notifications, pkg)

    for branch, packages in cve_pkgs.items():
        for pkg in packages:
            add_cve_pkg_notification(branch, notifications, pkg)

    for branch, pipelines in gitlab_results.items():
        for pipeline in pipelines:
            for job in pipeline['jobs']:
                if job['kind'] == 'defconfig':
                    add_defconfig_notification(branch, notifications, job)
                elif job['kind'] == 'runtime-test':
                    add_runtime_test_notification(branch, notifications, job)

    return notifications


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--dry-run', action='store_true', help='Do not send email, only show output')
    parser.add_argument('--date', action='store', help='Use this date instead of yesterday')
    parser.add_argument('--branches', action='store', nargs='+', help='List of branches (blank separated)')
    parser.add_argument('--dest', action='store', nargs='+', choices=['dev', 'global'],
                        help='List of emails type to send (ie. global, dev)')
    parser.add_argument('--data', action='store', nargs='+',
                        choices=['autobuild', 'outdated', 'cve', 'defconfig', 'runtime-test'],
                        help='List of information to add in emails (blank separated)')
    args = parser.parse_args()
    if args.date and not RE_DATE.match(args.date):
        parser.error('date must be in format YYYY-MM-DD')
    return args


def __main__():
    args = parse_args()
    if args.date:
        date_struct = datetime.strptime(args.date, '%Y-%m-%d').date()
    else:
        date_struct = date.today() - timedelta(1)
    date_str = date_struct.isoformat()
    branches = args.branches or get_branches()
    email_dest = set(args.dest) if args.dest else {'dev', 'global'}
    email_data = set(args.data) if args.data else {'autobuild', 'outdated', 'cve', 'defconfig', 'runtime-test'}

    if 'autobuild' in email_data:
        import pymysql
        db = pymysql.connect(host=localconfig.host,
                             user=localconfig.user,
                             password=localconfig.passwd,
                             database=localconfig.db,
                             cursorclass=pymysql.cursors.DictCursor)
        print("Getting overall stats")
        overall_stats = get_overall_stats(db, date_str, branches)
        print("Getting build results")
        results = get_build_results(db, date_str, branches)
        print("Getting build results by reason")
        results_by_reason = get_build_results_grouped_by_reason(db, date_str, branches)
    else:
        overall_stats = {}
        results = {}
        results_by_reason = {}
    if 'outdated' in email_data:
        if "next" in branches:
            outdated_pkgs_branch = "next"
        else:
            outdated_pkgs_branch = "master"
        print("Getting outdated package information from branch %s" % outdated_pkgs_branch)
        outdated_pkgs = get_outdated_pkgs(os.path.join(localconfig.pkg_stats, outdated_pkgs_branch + ".json"))
    else:
        outdated_pkgs = []

    if 'cve' in email_data:
        print("Getting CVE information")
        cve_pkgs = get_cve_pkgs(localconfig.pkg_stats, branches)
    else:
        cve_pkgs = {}

    if email_data & {'defconfig', 'runtime-test'}:
        print("Getting Gitlab CI information")
        loop = asyncio.get_event_loop()
        gitlab_ci = loop.run_until_complete(gitlab_ci_get(date_struct, kinds=email_data))
    else:
        gitlab_ci = {}
    notifications = calculate_notifications(results, outdated_pkgs, cve_pkgs, gitlab_ci)
    if args.dry_run:
        smtp = None
    else:
        smtp = smtplib.SMTP(localconfig.smtphost, localconfig.smtpport)
        smtp.starttls()
        smtp.login(localconfig.smtpuser, localconfig.smtppass)
    if 'dev' in email_dest:
        developers_email(smtp, branches, notifications, date_str, args.dry_run)
    if 'global' in email_dest:
        global_email(smtp, branches, results, results_by_reason, date_str,
                     overall_stats, outdated_pkgs, cve_pkgs, gitlab_ci, args.dry_run)
    if smtp:
        smtp.quit()


__main__()
